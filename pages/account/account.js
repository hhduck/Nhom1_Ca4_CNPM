// ==========================
// account.js - La Cuisine Ng·ªçt (T√≠ch h·ª£p API c·∫≠p nh·∫≠t th√¥ng tin - Ho√†n ch·ªânh)
// ==========================

document.addEventListener("DOMContentLoaded", () => {
  const customerNameDisplay = document.querySelector(".customer-name");
  const accountForm = document.getElementById("accountForm");
  const sidebarItems = document.querySelectorAll(".sidebar-menu li");
  const toggleIcons = document.querySelectorAll(".toggle-password");
  const saveButton = accountForm.querySelector(".save-btn");

  let userData = null;

  // --- TI·ªÜN √çCH: L·∫•y Auth Headers ---
  function getAuthHeaders() {
    const token = localStorage.getItem('jwtToken');
    if (!token) {
      console.error("Kh√¥ng t√¨m th·∫•y JWT Token!");
      logoutAndRedirect();
      return null;
    }
    return {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    };
  }

  // --- 1. KI·ªÇM TRA ƒêƒÇNG NH·∫¨P V√Ä L·∫§Y D·ªÆ LI·ªÜU ---
  const currentUserDataString = localStorage.getItem("currentUser");
  const jwtToken = localStorage.getItem("jwtToken");

  if (currentUserDataString && jwtToken) {
    try {
      userData = JSON.parse(currentUserDataString);
      if (!userData || !userData.id || !userData.email) {
        console.error("D·ªØ li·ªáu currentUser trong localStorage kh√¥ng h·ª£p l·ªá.");
        logoutAndRedirect(); return;
      }
    } catch (error) {
      console.error("L·ªói parse d·ªØ li·ªáu currentUser:", error);
      logoutAndRedirect(); return;
    }
  } else {
    console.log("Ch∆∞a ƒëƒÉng nh·∫≠p, chuy·ªÉn v·ªÅ trang login.");
    alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin t√†i kho·∫£n.");
    window.location.href = "../login/login.html"; return;
  }

  // --- ƒêi·ªÅn th√¥ng tin v√†o form ---
  if (userData) {
    customerNameDisplay.textContent = userData.full_name || "(Ch∆∞a c√≥ t√™n)";
    document.getElementById("nameInput").value = userData.full_name || "";
    document.getElementById("emailInput").value = userData.email || "";
    document.getElementById("phoneInput").value = userData.phone || "";
    document.getElementById("addressInput").value = userData.address || "";
    const emailInput = document.getElementById("emailInput");
    emailInput.readOnly = true;
    emailInput.style.backgroundColor = "#e9ecef";
    emailInput.title = "Kh√¥ng th·ªÉ thay ƒë·ªïi ƒë·ªãa ch·ªâ email.";
  }

  // --- 2. ·∫®N/HI·ªÜN M·∫¨T KH·∫®U ---
  toggleIcons.forEach(icon => {
    icon.addEventListener("click", () => {
      const targetInput = document.getElementById(icon.dataset.target);
      if (!targetInput) return;
      const isHidden = targetInput.type === "password";
      targetInput.type = isHidden ? "text" : "password";
      icon.classList.toggle("fa-eye");
      icon.classList.toggle("fa-eye-slash");
    });
  });

  // --- 3. X·ª¨ L√ù L∆ØU THAY ƒê·ªîI (G·ªåI API) ---
  accountForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    saveButton.disabled = true;
    saveButton.textContent = "ƒêang l∆∞u...";

    const headers = getAuthHeaders();
    if (!headers) {
      saveButton.disabled = false;
      saveButton.textContent = "L∆∞u thay ƒë·ªïi";
      return;
    }

    const newName = document.getElementById("nameInput").value.trim();
    const newPhone = document.getElementById("phoneInput").value.trim();
    const newAddress = document.getElementById("addressInput").value.trim();
    const oldPassword = document.getElementById("oldPassword").value;
    const newPassword = document.getElementById("newPassword").value;
    const confirmPassword = document.getElementById("confirmPassword").value;

    let infoUpdated = false;
    let passwordChanged = false; // V·∫´n gi·ªØ bi·∫øn n√†y cho ph·∫ßn ƒë·ªïi m·∫≠t kh·∫©u sau n√†y

    // --- a) G·ªçi API c·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n ---
    const infoChanged = newName !== (userData.full_name || '') ||
      newPhone !== (userData.phone || '') ||
      newAddress !== (userData.address || '');

    if (infoChanged) {
      const dataToUpdate = {
        full_name: newName,
        phone: newPhone,
        address: newAddress
      };

      try {
        // ƒê·∫£m b·∫£o URL g·ªçi API ƒë√∫ng ƒë·ªãnh d·∫°ng
        const apiUrl = `../../api/users.php/${userData.id}`; // Ch·ªâ c√≥ ID ng∆∞·ªùi d√πng
        console.log("G·ªçi API c·∫≠p nh·∫≠t:", apiUrl); // In ra URL ƒë·ªÉ ki·ªÉm tra

        const response = await fetch(apiUrl, {
          method: 'PUT',
          headers: headers,
          body: JSON.stringify(dataToUpdate)
        });

        const result = await response.json();
        console.log("K·∫øt qu·∫£ API:", result); // In k·∫øt qu·∫£ API

        if (response.ok && result.success) {
          infoUpdated = true;
          const updatedUserFromServer = result.data.user;
          localStorage.setItem("currentUser", JSON.stringify(updatedUserFromServer));
          userData = updatedUserFromServer;
          customerNameDisplay.textContent = userData.full_name;
        } else {
          // N√©m l·ªói v·ªõi th√¥ng b√°o t·ª´ API ho·∫∑c status code
          throw new Error(result.message || `L·ªói ${response.status} (${response.statusText}) khi c·∫≠p nh·∫≠t th√¥ng tin.`);
        }
      } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin:', error);
        // Hi·ªÉn th·ªã l·ªói c·ª• th·ªÉ h∆°n cho ng∆∞·ªùi d√πng
        alert(`L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin:\n${error.message}\nVui l√≤ng th·ª≠ l·∫°i.`);
        saveButton.disabled = false;
        saveButton.textContent = "L∆∞u thay ƒë·ªïi";
        return;
      }
    }

    // --- b) G·ªçi API ƒë·ªïi m·∫≠t kh·∫©u (N·∫æU C√ì NH·∫¨P) ---
    if (newPassword || confirmPassword || oldPassword) {
      if (!oldPassword) {
        alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p M·∫≠t kh·∫©u hi·ªán t·∫°i ƒë·ªÉ thay ƒë·ªïi m·∫≠t kh·∫©u!");
        document.getElementById("oldPassword").focus();
      } else if (newPassword.length < 6) {
        alert("‚ùå M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!");
        document.getElementById("newPassword").focus();
      } else if (newPassword !== confirmPassword) {
        alert("‚ùå M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
        document.getElementById("confirmPassword").focus();
      } else {
        console.log("Chu·∫©n b·ªã g·ªçi API ƒë·ªïi m·∫≠t kh·∫©u...");
        const passwordData = {
          oldPassword: oldPassword,
          newPassword: newPassword
        };
        try {
          alert("‚ö†Ô∏è Ch·ª©c nƒÉng ƒë·ªïi m·∫≠t kh·∫©u ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi API.");
          /*
          // Code g·ªçi API ƒë·ªïi m·∫≠t kh·∫©u s·∫Ω n·∫±m ·ªü ƒë√¢y
          const response = await fetch('../../api/auth/change_password.php', {
              method: 'POST',
              headers: headers,
              body: JSON.stringify(passwordData)
          });
          const result = await response.json();
          if (response.ok && result.success) {
              passwordChanged = true;
              document.getElementById("oldPassword").value = "";
              document.getElementById("newPassword").value = "";
              document.getElementById("confirmPassword").value = "";
          } else {
              throw new Error(result.message || `L·ªói ${response.status} khi ƒë·ªïi m·∫≠t kh·∫©u.`);
          }
          */
        } catch (error) {
          console.error('L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u:', error);
          alert(`L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: ${error.message}`);
        }
      }
    }

    // --- Th√¥ng b√°o k·∫øt qu·∫£ cu·ªëi c√πng ---
    if (infoUpdated || passwordChanged) {
      let successMessage = "";
      if (infoUpdated) successMessage += "Th√¥ng tin t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t. ";
      if (passwordChanged) successMessage += "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi.";
      alert(`‚úÖ ${successMessage.trim()}`);
    } else if (!infoChanged && !(newPassword || confirmPassword || oldPassword)) {
      alert("‚ÑπÔ∏è Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë·ªÉ l∆∞u.");
    }

    saveButton.disabled = false;
    saveButton.textContent = "L∆∞u thay ƒë·ªïi";
  });

  // --- 4. X·ª¨ L√ù SIDEBAR ---
  sidebarItems.forEach(item => {
    item.addEventListener("click", () => {
      const actionId = item.id;
      switch (actionId) {
        case "infoBtn":
          window.scrollTo({ top: 0, behavior: "smooth" }); break;
        case "ordersBtn":
          alert("üì¶ T√≠nh nƒÉng xem ƒë∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!"); break;
        case "logoutBtn":
          if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t kh√¥ng?")) {
            logoutAndRedirect();
          } break;
      }
    });
  });

  // --- H√ÄM ƒêƒÇNG XU·∫§T V√Ä CHUY·ªÇN H∆Ø·ªöNG ---
  function logoutAndRedirect() {
    console.log("ƒêang ƒëƒÉng xu·∫•t...");
    localStorage.removeItem('currentUser');
    localStorage.removeItem('jwtToken');
    localStorage.removeItem('rememberMe');
    window.location.href = "../login/login.html";
  }
}); 